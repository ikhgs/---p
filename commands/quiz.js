const axios = require('axios');

module.exports = {
  name: 'quiz',
  description: 'Fetch a random quiz question from the Open Trivia Database',
  author: 'üèñÔ∏è Quiz IA üèùÔ∏è',

  async execute(senderId, args, pageAccessToken, sendMessage) {
    // Si l'utilisateur a d√©j√† une question en cours, v√©rifier la r√©ponse
    if (global.QuizContext && global.QuizContext[senderId] && global.QuizContext[senderId].waitingForAnswer) {
      const userAnswer = parseInt(args[0], 10); // La r√©ponse de l'utilisateur
      const correctAnswer = global.QuizContext[senderId].correctAnswer;
      const correctIndex = global.QuizContext[senderId].correctIndex; // Index de la bonne r√©ponse (1-4)

      // V√©rifier si la r√©ponse est valide (entre 1 et 4)
      if (isNaN(userAnswer) || userAnswer < 1 || userAnswer > 4) {
        return sendMessage(senderId, { text: 'Veuillez r√©pondre avec un num√©ro entre 1 et 4 pour s√©lectionner une option.' }, pageAccessToken);
      }

      // V√©rifier si la r√©ponse est correcte
      if (userAnswer === correctIndex) {
        sendMessage(senderId, { text: 'Bonne r√©ponse ! üéâ' }, pageAccessToken);
      } else {
        sendMessage(senderId, { text: `Mauvaise r√©ponse. La bonne r√©ponse √©tait : ${correctAnswer}.` }, pageAccessToken);
      }

      // R√©initialiser l'√©tat du quiz apr√®s la r√©ponse
      global.QuizContext[senderId] = null;
      sendMessage(senderId, { text: "Envoyez 'quiz' pour une nouvelle question ou toute autre commande pour interagir." }, pageAccessToken);
      return;
    }

    // Si aucune question n'est en attente de r√©ponse, g√©n√©rer une nouvelle question
    sendMessage(senderId, { text: "üèñÔ∏è Quiz IA üèùÔ∏è vous pr√©pare une question, veuillez patienter..." }, pageAccessToken);

    try {
      // Appel √† l'API Open Trivia Database pour obtenir une question al√©atoire
      const apiUrl = 'https://opentdb.com/api.php?amount=1&type=multiple';
      const response = await axios.get(apiUrl);

      if (response.data && response.data.results && response.data.results.length > 0) {
        const quizData = response.data.results[0];
        const question = quizData.question;
        const correctAnswer = quizData.correct_answer;
        const incorrectAnswers = quizData.incorrect_answers;

        // M√©langer les r√©ponses (correcte et incorrectes)
        const allAnswers = [...incorrectAnswers, correctAnswer].sort(() => Math.random() - 0.5);

        // Cr√©er le message du quiz
        const quizMessage = `üèñÔ∏è Quiz IA üèùÔ∏è\n\nQuestion: ${question}\n\nOptions:\n${allAnswers.map((ans, index) => `${index + 1}. ${ans}`).join('\n')}`;

        // Envoyer la question du quiz
        sendMessage(senderId, { text: quizMessage }, pageAccessToken);

        // Stocker la r√©ponse correcte pour v√©rifier plus tard
        const correctIndex = allAnswers.indexOf(correctAnswer) + 1; // Index 1-based pour la bonne r√©ponse
        global.QuizContext = global.QuizContext || {};
        global.QuizContext[senderId] = {
          correctAnswer: correctAnswer,
          correctIndex: correctIndex,
          waitingForAnswer: true // Indique que nous attendons une r√©ponse
        };
      } else {
        sendMessage(senderId, { text: 'Impossible de r√©cup√©rer une question de quiz pour le moment.' }, pageAccessToken);
      }
    } catch (error) {
      console.error('Erreur lors de la requ√™te API:', error.message, error.response?.data);
      sendMessage(senderId, { text: 'Une erreur est survenue lors de la r√©cup√©ration de la question.' }, pageAccessToken);
    }
  }
};
